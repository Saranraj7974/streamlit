# -*- coding: utf-8 -*-
"""Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EHO1G_GeTrDxN2GRee8uvJhDUDPiYZyz
"""

# streamlit_app.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# --------------------------
# STREAMLIT DASHBOARD
# --------------------------

st.set_page_config(page_title="Sprint 3 Platform", layout="wide")

st.title("📊 Sprint 3: Interactive Analytics & Model Dashboard (NIFTY-50)")

# Sidebar for ticker input
st.sidebar.header("Data Settings")
ticker = st.sidebar.text_input(
    "Enter Stock/Index Ticker (e.g. ^NSEI for NIFTY 50, RELIANCE.NS for Reliance)",
    "^NSEI"
)
start_date = st.sidebar.date_input("Start Date", pd.to_datetime("2023-01-01"))
end_date = st.sidebar.date_input("End Date", pd.to_datetime("today"))

if ticker:
    try:
        # Download data from yfinance
        data = yf.download(ticker, start=start_date, end=end_date)

        if not data.empty:
            st.subheader(f"Preview of {ticker} Data")
            st.write(data.head())

            # Descriptive statistics
            st.subheader("📈 Descriptive Statistics")
            st.write(data.describe())

            # Correlation Heatmap
            st.subheader("🔗 Correlation Heatmap")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.heatmap(data.corr(), annot=True, cmap="coolwarm", ax=ax)
            st.pyplot(fig)

            # Interactive Plotly chart
            st.subheader("📊 Interactive Price Chart")
            fig = px.line(data, x=data.index, y="Adj Close", title=f"{ticker} Adjusted Close Price")
            st.plotly_chart(fig, use_container_width=True)

            # Returns & Sharpe Ratio Example
            st.subheader("📉 Returns & Metrics")
            data["Daily Return"] = data["Adj Close"].pct_change()
            mean_return = data["Daily Return"].mean()
            std_return = data["Daily Return"].std()
            sharpe_ratio = mean_return / std_return * np.sqrt(252) if std_return != 0 else 0

            st.metric(label="Sharpe Ratio", value=round(sharpe_ratio, 2))

            # Placeholder for ML model results
            st.subheader("🤖 Model Results & Metrics")
            r2 = 0.87
            f1 = 0.76
            alpha_value = 0.12

            col1, col2, col3 = st.columns(3)
            col1.metric(label="R² Score", value=round(r2, 3))
            col2.metric(label="F1 Score", value=round(f1, 3))
            col3.metric(label="Alpha", value=round(alpha_value, 2))

        else:
            st.warning("⚠️ No data found for this ticker/date range.")

    except Exception as e:
        st.error(f"Error fetching data: {e}")

# --------------------------
# FOOTER
# --------------------------
st.markdown("---")
st.markdown("Developed in **Sprint 3** 🚀 | Streamlit Dashboard for Models & Analytics | Data via Yahoo Finance")