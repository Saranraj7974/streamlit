# -*- coding: utf-8 -*-
"""Untitled151.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PNGmgrISvSzXDTHaGUvVMnUta1Tv2dmC
"""

!pip install streamlit yfinance plotly

# stock_dashboard.py
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# --------------------------
# Streamlit App Config
# --------------------------
st.set_page_config(page_title="Stock Dashboard", layout="wide")

st.title("📊 Stock Market Dashboard")

# Sidebar for ticker input
st.sidebar.header("Settings")
ticker = st.sidebar.text_input("Enter Stock Ticker (e.g. ^NSEI for NIFTY 50, AAPL for Apple)", "^NSEI")
start_date = st.sidebar.date_input("Start Date", pd.to_datetime("2020-01-01"))
end_date = st.sidebar.date_input("End Date", pd.to_datetime("2025-01-01"))

# Fetch stock data
if ticker:
    try:
        data = yf.download(ticker, start=start_date, end=end_date)

        if not data.empty:
            st.subheader(f"Preview of {ticker} Data")
            st.write(data.head())

            # Descriptive statistics
            st.subheader("📈 Descriptive Statistics")
            st.write(data.describe())

            # Interactive Line Chart
            st.subheader("📊 Adjusted Close Price")
            fig = px.line(data, x=data.index, y="Adj Close", title=f"{ticker} Adjusted Close Price")
            st.plotly_chart(fig, use_container_width=True)

            # Daily Returns
            data["Daily Return"] = data["Adj Close"].pct_change()
            st.subheader("📉 Daily Returns")
            fig = px.line(data, x=data.index, y="Daily Return", title=f"{ticker} Daily Returns")
            st.plotly_chart(fig, use_container_width=True)

            # Histogram of returns
            st.subheader("📊 Distribution of Daily Returns")
            fig, ax = plt.subplots(figsize=(8, 4))
            sns.histplot(data["Daily Return"].dropna(), bins=50, kde=True, ax=ax)
            ax.set_title("Distribution of Daily Returns")
            st.pyplot(fig)

            # Performance Metrics
            st.subheader("⚡ Performance Metrics")
            mean_return = data["Daily Return"].mean()
            std_return = data["Daily Return"].std()
            sharpe_ratio = mean_return / std_return * np.sqrt(252) if std_return != 0 else 0

            col1, col2, col3 = st.columns(3)
            col1.metric("Average Daily Return", f"{mean_return:.4f}")
            col2.metric("Volatility (Std Dev)", f"{std_return:.4f}")
            col3.metric("Sharpe Ratio", f"{sharpe_ratio:.2f}")

        else:
            st.warning("⚠️ No data found for this ticker/date range.")

    except Exception as e:
        st.error(f"Error fetching data: {e}")

# --------------------------
# Footer
# --------------------------
st.markdown("---")
st.markdown("📌 Developed with Streamlit | Data from Yahoo Finance (yfinance)")